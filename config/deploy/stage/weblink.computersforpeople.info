# this can be any application server, not just Unicorn/Rainbows!
upstream stage_unicorn {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  server unix:/tmp/unicorn.weblink.stage.sock fail_timeout=0;

  # for TCP setups, point these to your backend servers
  # server 192.168.0.7:8080 fail_timeout=0;
  # server 192.168.0.8:8080 fail_timeout=0;
  # server 192.168.0.9:8080 fail_timeout=0;
}

server 
  {
  # port to listen on. Can also be set to an IP:PORT
  listen 80;
  
  # Set the max size for file uploads to 50Mb
  client_max_body_size 50M;

  # sets the domain[s] that this vhost server requests for
  server_name weblink.computersforpeople.info;

  # doc root
  root /apps/weblink/stage/current/public;

  # vhost specific access log
  access_log  /apps/weblink/stage/shared/log/nginx.vhost.access.log  main;
  error_log   /apps/weblink/stage/shared/log/nginx.vhost.error.log   debug;

	# this rewrites all the requests to the maintenance.html
	# page if it exists in the doc root. This is for capistrano's
	# disable web task.
	# NTW: not normally needed with passenger, but we are now using
	# backgroundrb, so do want to disable the site while that's being 
	# restart
	if (-f $document_root/system/maintenance.html) 
	  {
	  rewrite  ^(.*)$  /system/maintenance.html last;
	  break;
	  }

  location /files/
    {  
    internal;  
    root /apps/weblink/stage/current/;  # note the trailing slash
    }

  location ~* ^(?!/(media|assets)).+\.(js|css|jpg|jpeg|gif|png)$
    {
    access_log   off;
    expires      60d;
    }

  location / 
    {
    # needed to forward user's IP address to rails
    proxy_set_header  X-Real-IP  $remote_addr;

    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_max_temp_file_size 0;

    # If the file exists as a static file serve it directly without
    # running all the other rewite tests on it
    if (-f $request_filename) 
      { 
      break; 
      }

    # check for index.html for directory index
    # if its there on the filesystem then rewite 
    # the url to add /index.html to the end of it
    # and then break to send it to the next config rules.
    if (-f $request_filename/index.html) 
      {
      rewrite (.*) $1/index.html break;
      }

    # this is the meat of the rails page caching config
    # it adds .html to the end of the url and then checks
    # the filesystem for that file. If it exists, then we
    # rewite the url to have explicit .html on the end 
    # and then send it on its way to the next config rule.
    # if there is no file on the fs then it sets all the 
    # necessary headers and proxies to our upstream mongrels
    if (-f $request_filename.html) 
      {
      rewrite (.*) $1.html break;
      }

    if (!-f $request_filename)
      {
      proxy_pass http://stage_unicorn;
      break;
      }

    }

  error_page   500 502 503 504  /500.html;
  location = /500.html
    {
    root   /apps/weblink/stage/current/public;
    }
  }
